上次我们串联了知识点，做了接口测试的demo，并且抛出了那样做所面临的问题。
本文开始解决如何解决这些问题

unittest.Testsuit

先看我们之前设计的Userinfo测试脚本

这里如果细心的同学会发现，unittest的输出结果有一些和我们预想不太一样，
unittest先执行了test_userinfo_fail方法，再执行test_userinfo_success
当然这样其实也没啥问题，如果说这两个接口存在接口依赖，fail方法需要success执行
后的结果值作为请求参数发送，那么这样的执行顺序一定会导致fail方法的失败。

unittest在执行用例顺序时，使用字母排序的方式，首字母s在首字母f后，那么它的执行
顺序就在后，所以想要定制执行顺序需要使用叫测试套件的Testsuit，详细内容可以自行搜索
这里我们通俗的讲就是，有个叫testsuit的篮子，有多个testcase的水果，我们依次将
水果按照我们想要的顺序放进去，方便我们拿出来的时候好按照预期的方式拿出来。

case也是同样的，我们按照一定顺序放case放入testsuit里，在执行时，unittest会按照
我们放入的顺序去执行。

回到我们上面提出的问题，如果存在接口依赖，case2需要case1执行成功才可以执行时，那我们就
讲case1，case2按顺序放入testsuit里即可

当我们的测试demo里放入了很多的testcase时，在调试错误或者接口废弃时，我们的操作会显得很麻烦
我们一一处理
1.调试某一个case的错误
    我们的case在unittest.main()时，会执行当前脚本内所有的case，如果某一个case有问题
    我们需要调试或者修改时，执行unittest.main()会显得很笨，
    这里依然用testsuit，只放入我们待调试\修改的case进去，再去执行。会便捷许多
2.当某一个接口弃用时
    很可能你会遇到如果一个接口被弃用了，那么相关的case就没有必要执行。手动删除是一个方法
    如果你不确定这个接口是否会被再次启用时，只能选择注释掉该代码。这样的方式也能达成效果
    但是这样的工作也会很繁琐
    testsuit提供了skip的方式，让unittest在执行带有skip方法标记的case时，可以直接跳过
    该方法



在执行测试用例时，有时候有些用例是不需要执行的，那我们怎么办呢？难道删除这些用例？那下次执行时如果又需要执行这些用例时，又把它补回来？这样操作就太麻烦了
unittest提供了一些跳过指定用例的方法




